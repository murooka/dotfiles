snippet pu
    public 

snippet pr
    private 

snippet st
    static 

snippet fi
    final 

snippet ab
    abstract 

snippet cl
alias   class
	class ${1} {
		${0}
	}

snippet in
	interface ${1} ${2:extends} ${3:Parent} {
		${0}
	}

snippet co
    static public final ${1} = ${2};${3}

snippet as
    assert ${1:test} ${2:Failure message};${3}

snippet if
	if (${1}) {
		${2}
	}

snippet else
    else {
        ${0}
    }

snippet elif
	else if (${1}) {
		${2}
	}
    

snippet wh
alias   while
	while (${1}) {
		${2}
	}
    

snippet for
	for (${1}; ${2}; ${3}) {
		${4}
	}
	
	
snippet fore
	for (${1} : ${2}) {
		${3}
	}

snippet rep
	for (int ${1}=0; $1<${2}; $1++) {
		${3}
	}

snippet sw
alias   switch
	switch (${1}) {
		${2}
	}

snippet case
abbr ce
	case ${1}: ${2} break;

snippet de
	default:
		${0}

snippet ca
	catch (${1:Exception} ${2:e}) {
		${0}
	}

snippet im
    import 

snippet pa
    package 

snippet main
	public static void main(String[] args) {
		${0}
	}
    

snippet pl
	System.out.println(${1});${0}

snippet p
	System.out.print(${1});${0}

#general class
snippet al
	ArrayList<${1}>${2}

snippet nal
	ArrayList<${1}> ${2} = new ArrayList<$1>();${3}

snippet ll
	LinkedList<${1}>${2}

#algorithm
snippet era
alias   eratos,eratosthenes
	static public final int pmax = 1000000;
	static boolean[] prime = new boolean[pmax+1];
	public static void eratosthenes() {
		prime = new boolean[pmax+1];
		for (int i=2; i<pmax; i++) prime[i] = true;
		for (int i=2; i*i<=pmax; i++) {
			if (!prime[i]) continue;
			for (int j=i*2; j<pmax; j+=i) prime[j] = false;
		}
	}

snippet icpc
	import java.util.*;
	import java.math.*;
	
	class ${1} {
		public static void main(String[] args) {
			Scanner sc = new Scanner(System.in);
			${2}
		}
	}

#javadoc
#snippet c
#	/**
#	 * ${0}
#	 */
    
